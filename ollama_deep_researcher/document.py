"""
Document export functionality for Ollama Deep Researcher
"""
import os
import io
import logging
from typing import Dict, Any, Optional, List
from fastapi import APIRouter, Request, HTTPException, BackgroundTasks
from fastapi.responses import FileResponse, Response, StreamingResponse
import markdown
from datetime import datetime

# Initialize logging
logger = logging.getLogger(__name__)

# Create API router
router = APIRouter()

try:
    # Optional dependencies for document export
    from docx import Document
    from docx.shared import Inches, Pt
    from docx.enum.text import WD_ALIGN_PARAGRAPH
    from docx.oxml.ns import qn
    docx_available = True
except ImportError:
    logger.warning("python-docx not installed. Word document export will be unavailable.")
    docx_available = False

@router.post("/document/export-docx")
async def export_to_docx(request: Request):
    """
    Export research results to Microsoft Word format
    
    The request body should contain:
    - markdown: The markdown text to convert
    - topic: The research topic (optional)
    """
    if not docx_available:
        raise HTTPException(
            status_code=501,
            detail="Document export functionality is not available. Please install python-docx."
        )
    
    try:
        # Parse request data
        data = await request.json()
        markdown_content = data.get("markdown", "")
        topic = data.get("topic", "Research Results")
        
        # Create document
        doc = create_word_document(markdown_content, topic)
        
        # Save to memory
        f = io.BytesIO()
        doc.save(f)
        f.seek(0)
        
        # Generate a filename
        date_str = datetime.now().strftime("%Y-%m-%d")
        filename = f"research_{date_str}.docx"
        
        # Return as downloadable file
        return StreamingResponse(
            f, 
            media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            headers={"Content-Disposition": f"attachment;filename={filename}"}
        )
    
    except Exception as e:
        logger.error(f"Error exporting to DOCX: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Failed to generate document: {str(e)}"
        )

def create_word_document(markdown_content: str, title: str = "Research Results") -> Any:
    """
    Create a formatted Word document from markdown content
    """
    # Create document
    doc = Document()
    
    # Add title
    title_paragraph = doc.add_paragraph()
    title_run = title_paragraph.add_run(title)
    title_run.font.size = Pt(24)
    title_run.font.bold = True
    title_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    # Add date
    date_paragraph = doc.add_paragraph()
    date_run = date_paragraph.add_run(f"Generated on {datetime.now().strftime('%Y-%m-%d')}")
    date_run.font.italic = True
    date_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    doc.add_paragraph()  # Add spacing
    
    # Process markdown sections
    sections = markdown_content.split("\n## ")
    
    # Process main content
    main_content = sections[0]
    doc.add_paragraph(main_content)
    
    # Process sections with headings
    for i, section in enumerate(sections[1:], 1):
        # Split into heading and content
        lines = section.split("\n", 1)
        heading = lines[0]
        content = lines[1] if len(lines) > 1 else ""
        
        # Add heading
        h = doc.add_heading(level=2)
        h_run = h.add_run(heading)
        
        # Add content
        if content:
            # Handle lists
            list_items = []
            paragraphs = content.split("\n\n")
            
            for para in paragraphs:
                if para.startswith("- ") or para.startswith("* "):
                    # This is a list item
                    items = para.split("\n")
                    for item in items:
                        if item.startswith("- ") or item.startswith("* "):
                            p = doc.add_paragraph(item[2:], style="List Bullet")
                else:
                    # Regular paragraph
                    doc.add_paragraph(para)
    
    # Add footer
    section = doc.sections[0]
    footer = section.footer
    footer_para = footer.paragraphs[0]
    footer_para.text = "Generated by Ollama Deep Researcher"
    footer_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    return doc

def register_document_routes(app):
    """Register document-related routes with the FastAPI application"""
    app.include_router(router, prefix="/api", tags=["documents"])
    logger.info("Document export routes registered")

# Export functionality directly if document module is imported
if __name__ == "__main__":
    # Example usage
    md_content = """# Research Results

This is a sample research document generated by Ollama Deep Researcher.

## Key Findings

- The first important finding
- Another critical discovery
- A third interesting point

## Sources

- [Source 1](http://example.com/1)
- [Source 2](http://example.com/2)
"""
    
    if docx_available:
        doc = create_word_document(md_content, "Sample Research")
        doc.save("sample_research.docx")
        print("Document created: sample_research.docx")
    else:
        print("python-docx not installed. Cannot create Word document.")
